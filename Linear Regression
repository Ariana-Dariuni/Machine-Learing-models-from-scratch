{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "80417936",
   "metadata": {
    "papermill": {
     "duration": 0.015439,
     "end_time": "2024-03-12T14:58:00.246411",
     "exception": false,
     "start_time": "2024-03-12T14:58:00.230972",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Practical Homework 1 - Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d15fbdb8",
   "metadata": {
    "papermill": {
     "duration": 0.016057,
     "end_time": "2024-03-12T14:58:00.277560",
     "exception": false,
     "start_time": "2024-03-12T14:58:00.261503",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Please write your name and student number in the following cell.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8e81a1ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:00.310118Z",
     "iopub.status.busy": "2024-03-12T14:58:00.309432Z",
     "iopub.status.idle": "2024-03-12T14:58:00.313699Z",
     "shell.execute_reply": "2024-03-12T14:58:00.312999Z"
    },
    "papermill": {
     "duration": 0.022886,
     "end_time": "2024-03-12T14:58:00.315558",
     "exception": false,
     "start_time": "2024-03-12T14:58:00.292672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Student_Name = \"Ariana Dariuni\"\n",
    "# Student_Number = \"400103624\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5890b5eb",
   "metadata": {
    "papermill": {
     "duration": 0.014728,
     "end_time": "2024-03-12T14:58:00.345512",
     "exception": false,
     "start_time": "2024-03-12T14:58:00.330784",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Phase 0: Intro"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff5b2680",
   "metadata": {
    "papermill": {
     "duration": 0.014674,
     "end_time": "2024-03-12T14:58:00.375521",
     "exception": false,
     "start_time": "2024-03-12T14:58:00.360847",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For this assignment, you'll be given a dataset containing cars for sale. To study the dataset in more detail, refer to [this](https://www.kaggle.com/datasets/arianghasemi/divar-cars/data) link."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cd738de3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:00.407442Z",
     "iopub.status.busy": "2024-03-12T14:58:00.407014Z",
     "iopub.status.idle": "2024-03-12T14:58:02.803134Z",
     "shell.execute_reply": "2024-03-12T14:58:02.802165Z"
    },
    "papermill": {
     "duration": 2.41555,
     "end_time": "2024-03-12T14:58:02.806018",
     "exception": false,
     "start_time": "2024-03-12T14:58:00.390468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2024-03-12 14:58:01--  https://www.dropbox.com/scl/fi/cwd3e0wo7j41wungb4zat/cars.csv?rlkey=z83jkj9ex2no06z4htf6ce1w5&dl=1\r\n",
      "Resolving www.dropbox.com (www.dropbox.com)... 162.125.9.18, 2620:100:601f:18::a27d:912\r\n",
      "Connecting to www.dropbox.com (www.dropbox.com)|162.125.9.18|:443... connected.\r\n",
      "HTTP request sent, awaiting response... 302 Found\r\n",
      "Location: https://ucff4bd001896233006d2e6a47dd.dl.dropboxusercontent.com/cd/0/inline/CO8ocvcNH-84yEIqeNAmBLDuW2razZFh6BDaCImnG816tIq39TCDk52a5XPPhSK4eb3h3ek6staIYEOFxfY9YUvpsYgATis7QlOO1nr25CDSLU2qoGi9Pzoi5s-OfttdgZk7PfL0Cna7diwlHk2t4HgK/file?dl=1# [following]\r\n",
      "--2024-03-12 14:58:02--  https://ucff4bd001896233006d2e6a47dd.dl.dropboxusercontent.com/cd/0/inline/CO8ocvcNH-84yEIqeNAmBLDuW2razZFh6BDaCImnG816tIq39TCDk52a5XPPhSK4eb3h3ek6staIYEOFxfY9YUvpsYgATis7QlOO1nr25CDSLU2qoGi9Pzoi5s-OfttdgZk7PfL0Cna7diwlHk2t4HgK/file?dl=1\r\n",
      "Resolving ucff4bd001896233006d2e6a47dd.dl.dropboxusercontent.com (ucff4bd001896233006d2e6a47dd.dl.dropboxusercontent.com)... 162.125.9.15, 2620:100:601f:15::a27d:90f\r\n",
      "Connecting to ucff4bd001896233006d2e6a47dd.dl.dropboxusercontent.com (ucff4bd001896233006d2e6a47dd.dl.dropboxusercontent.com)|162.125.9.15|:443... connected.\r\n",
      "HTTP request sent, awaiting response... 200 OK\r\n",
      "Length: 11114732 (11M) [application/binary]\r\n",
      "Saving to: '/kaggle/working/dataset.csv'\r\n",
      "\r\n",
      "/kaggle/working/dat 100%[===================>]  10.60M  --.-KB/s    in 0.1s    \r\n",
      "\r\n",
      "2024-03-12 14:58:02 (82.8 MB/s) - '/kaggle/working/dataset.csv' saved [11114732/11114732]\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!wget -O /kaggle/working/dataset.csv \"https://www.dropbox.com/scl/fi/cwd3e0wo7j41wungb4zat/cars.csv?rlkey=z83jkj9ex2no06z4htf6ce1w5&dl=1\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f1f74f05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:02.840246Z",
     "iopub.status.busy": "2024-03-12T14:58:02.839819Z",
     "iopub.status.idle": "2024-03-12T14:58:05.315367Z",
     "shell.execute_reply": "2024-03-12T14:58:05.313808Z"
    },
    "papermill": {
     "duration": 2.496584,
     "end_time": "2024-03-12T14:58:05.318947",
     "exception": false,
     "start_time": "2024-03-12T14:58:02.822363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Warning! You are not permitted to import any other libraries\n",
    "\n",
    "import os\n",
    "import pandas\n",
    "import sklearn\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from tqdm import tqdm\n",
    "\n",
    "import seaborn as sns\n",
    "from joblib import dump, load\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import warnings\n",
    "from warnings import simplefilter\n",
    "simplefilter(action=\"ignore\", category=pd.errors.PerformanceWarning)\n",
    "warnings.filterwarnings(\"ignore\", \"is_categorical_dtype\")\n",
    "warnings.filterwarnings(\"ignore\", \"use_inf_as_na\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43c9f955",
   "metadata": {
    "papermill": {
     "duration": 0.023818,
     "end_time": "2024-03-12T14:58:05.362631",
     "exception": false,
     "start_time": "2024-03-12T14:58:05.338813",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Phase 1: Load Data (P1: 2 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17f3096b",
   "metadata": {
    "papermill": {
     "duration": 0.016793,
     "end_time": "2024-03-12T14:58:05.400094",
     "exception": false,
     "start_time": "2024-03-12T14:58:05.383301",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Load the dataset (as a dataframe) using pandas and display the top 5 rows of the dataframe. **(P1-1: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e60faf33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:05.435816Z",
     "iopub.status.busy": "2024-03-12T14:58:05.435004Z",
     "iopub.status.idle": "2024-03-12T14:58:05.781334Z",
     "shell.execute_reply": "2024-03-12T14:58:05.780179Z"
    },
    "papermill": {
     "duration": 0.365815,
     "end_time": "2024-03-12T14:58:05.783696",
     "exception": false,
     "start_time": "2024-03-12T14:58:05.417881",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Model_Year</th>\n",
       "      <th>Color</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Body_Condition</th>\n",
       "      <th>Price</th>\n",
       "      <th>Engine_Condition</th>\n",
       "      <th>Chassis_Condition</th>\n",
       "      <th>Third_party_insurance</th>\n",
       "      <th>Gearbox</th>\n",
       "      <th>Selling_Method</th>\n",
       "      <th>Time</th>\n",
       "      <th>Location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۱۳۷۶</td>\n",
       "      <td>نقره ای</td>\n",
       "      <td>۵۳۲</td>\n",
       "      <td>نیسان، پاترول 4 در، 6 سیلندر</td>\n",
       "      <td>تمام رنگ</td>\n",
       "      <td>235000000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۶ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>آجودانیه</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۱۳۹۲</td>\n",
       "      <td>سفید</td>\n",
       "      <td>۱۵۰٬۰۰۰</td>\n",
       "      <td>CNG ،پیکان، وانت</td>\n",
       "      <td>خط و خش جزیی</td>\n",
       "      <td>110000000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2022-03-12</td>\n",
       "      <td>بلوار کشاورز</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۱۳۹۹</td>\n",
       "      <td>سفید</td>\n",
       "      <td>۰</td>\n",
       "      <td>SE ،131 ،پراید</td>\n",
       "      <td>سالم و بی خط و خش</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۱۲ ماه</td>\n",
       "      <td>NaN</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>دولت آباد</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۱۳۹۶</td>\n",
       "      <td>سفید</td>\n",
       "      <td>۸۰٬۰۰۰</td>\n",
       "      <td>SE ،132 ،پراید</td>\n",
       "      <td>سالم و بی خط و خش</td>\n",
       "      <td>125500000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۶ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>پیروزی</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۱۳۹۳</td>\n",
       "      <td>نقره ای</td>\n",
       "      <td>۸۰٬۰۰۰</td>\n",
       "      <td>پژو، GLX ،405 بنزینی</td>\n",
       "      <td>سالم و بی خط و خش</td>\n",
       "      <td>187000000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۹ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>پیروزی</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     City Model_Year    Color  Mileage                         Brand  \\\n",
       "0  Tehran       ۱۳۷۶  نقره ای      ۵۳۲  نیسان، پاترول 4 در، 6 سیلندر   \n",
       "1  Tehran       ۱۳۹۲     سفید  ۱۵۰٬۰۰۰              CNG ،پیکان، وانت   \n",
       "2  Tehran       ۱۳۹۹     سفید        ۰                SE ،131 ،پراید   \n",
       "3  Tehran       ۱۳۹۶     سفید   ۸۰٬۰۰۰                SE ،132 ،پراید   \n",
       "4  Tehran       ۱۳۹۳  نقره ای   ۸۰٬۰۰۰          پژو، GLX ،405 بنزینی   \n",
       "\n",
       "      Body_Condition        Price Engine_Condition Chassis_Condition  \\\n",
       "0           تمام رنگ  235000000.0             سالم       سالم و پلمپ   \n",
       "1       خط و خش جزیی  110000000.0              NaN               NaN   \n",
       "2  سالم و بی خط و خش          NaN              NaN       سالم و پلمپ   \n",
       "3  سالم و بی خط و خش  125500000.0             سالم       سالم و پلمپ   \n",
       "4  سالم و بی خط و خش  187000000.0             سالم       سالم و پلمپ   \n",
       "\n",
       "  Third_party_insurance  Gearbox Selling_Method        Time       Location  \n",
       "0                 ۶ ماه  دنده ای           نقدی  2022-03-26      آجودانیه   \n",
       "1                   NaN      NaN            NaN  2022-03-12  بلوار کشاورز   \n",
       "2                ۱۲ ماه      NaN           نقدی  2022-03-26     دولت آباد   \n",
       "3                 ۶ ماه  دنده ای           نقدی  2022-03-26        پیروزی   \n",
       "4                 ۹ ماه  دنده ای           نقدی  2022-03-26        پیروزی   "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_path = '/kaggle/working/dataset.csv'\n",
    "df = pd.read_csv(file_path)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11313f0e",
   "metadata": {
    "papermill": {
     "duration": 0.015512,
     "end_time": "2024-03-12T14:58:05.815118",
     "exception": false,
     "start_time": "2024-03-12T14:58:05.799606",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Drop any row containing null values. **(P1-2: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fa46d2fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:05.848911Z",
     "iopub.status.busy": "2024-03-12T14:58:05.848231Z",
     "iopub.status.idle": "2024-03-12T14:58:05.901752Z",
     "shell.execute_reply": "2024-03-12T14:58:05.900594Z"
    },
    "papermill": {
     "duration": 0.073585,
     "end_time": "2024-03-12T14:58:05.904492",
     "exception": false,
     "start_time": "2024-03-12T14:58:05.830907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "df=df.dropna() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9e2acf62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:05.938397Z",
     "iopub.status.busy": "2024-03-12T14:58:05.937715Z",
     "iopub.status.idle": "2024-03-12T14:58:05.958923Z",
     "shell.execute_reply": "2024-03-12T14:58:05.957794Z"
    },
    "papermill": {
     "duration": 0.040642,
     "end_time": "2024-03-12T14:58:05.961108",
     "exception": false,
     "start_time": "2024-03-12T14:58:05.920466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Model_Year</th>\n",
       "      <th>Color</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Body_Condition</th>\n",
       "      <th>Price</th>\n",
       "      <th>Engine_Condition</th>\n",
       "      <th>Chassis_Condition</th>\n",
       "      <th>Third_party_insurance</th>\n",
       "      <th>Gearbox</th>\n",
       "      <th>Selling_Method</th>\n",
       "      <th>Time</th>\n",
       "      <th>Location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۱۳۷۶</td>\n",
       "      <td>نقره ای</td>\n",
       "      <td>۵۳۲</td>\n",
       "      <td>نیسان، پاترول 4 در، 6 سیلندر</td>\n",
       "      <td>تمام رنگ</td>\n",
       "      <td>235000000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۶ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>آجودانیه</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۱۳۹۶</td>\n",
       "      <td>سفید</td>\n",
       "      <td>۸۰٬۰۰۰</td>\n",
       "      <td>SE ،132 ،پراید</td>\n",
       "      <td>سالم و بی خط و خش</td>\n",
       "      <td>125500000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۶ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>پیروزی</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۱۳۹۳</td>\n",
       "      <td>نقره ای</td>\n",
       "      <td>۸۰٬۰۰۰</td>\n",
       "      <td>پژو، GLX ،405 بنزینی</td>\n",
       "      <td>سالم و بی خط و خش</td>\n",
       "      <td>187000000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۹ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>پیروزی</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۱۳۹۳</td>\n",
       "      <td>سفید</td>\n",
       "      <td>۸۵٬۰۰۰</td>\n",
       "      <td>SD، V8 206 ،پژو</td>\n",
       "      <td>خط و خش جزیی</td>\n",
       "      <td>215000000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۴ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>یوسف آباد</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۲۰۱۶</td>\n",
       "      <td>سفید</td>\n",
       "      <td>۱۰۰٬۰۰۰</td>\n",
       "      <td>سانگ یانگ، تیوولی، الیت</td>\n",
       "      <td>سالم و بی خط و خش</td>\n",
       "      <td>830000000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۸ ماه</td>\n",
       "      <td>اتوماتیک</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>وردآورد</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56396</th>\n",
       "      <td>Shiraz</td>\n",
       "      <td>۱۳۹۵</td>\n",
       "      <td>مشکی</td>\n",
       "      <td>۶۳٬۰۰۰</td>\n",
       "      <td>رنو، تندر 90، اتوماتیک</td>\n",
       "      <td>سالم و بی خط و خش</td>\n",
       "      <td>380000000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۱۲ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-12</td>\n",
       "      <td>سینما سعدی</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56397</th>\n",
       "      <td>Shiraz</td>\n",
       "      <td>۱۳۸۳</td>\n",
       "      <td>یشمی</td>\n",
       "      <td>۱۰۰٬۰۰۰</td>\n",
       "      <td>پیکان، بنزینی</td>\n",
       "      <td>صافکاری بی رنگ، در ۱ ناحیه</td>\n",
       "      <td>75000000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۱۱ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>ابونصر</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56398</th>\n",
       "      <td>Shiraz</td>\n",
       "      <td>۲۰۱۲</td>\n",
       "      <td>سفید</td>\n",
       "      <td>۱۷۲٬۰۰۰</td>\n",
       "      <td>سانگ یانگ، رکستون، ساده</td>\n",
       "      <td>خط و خش جزیی</td>\n",
       "      <td>930000000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۳ ماه</td>\n",
       "      <td>اتوماتیک</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>گلدشت حافظ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56399</th>\n",
       "      <td>Shiraz</td>\n",
       "      <td>۲۰۱۳</td>\n",
       "      <td>موکا</td>\n",
       "      <td>۱۳۵٬۰۰۰</td>\n",
       "      <td>جیلی، Emgrand 7، دنده ای</td>\n",
       "      <td>خط و خش جزیی</td>\n",
       "      <td>280000000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۷ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-26</td>\n",
       "      <td>شریف آباد</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56401</th>\n",
       "      <td>Shiraz</td>\n",
       "      <td>۱۴۰۰</td>\n",
       "      <td>نقره ای</td>\n",
       "      <td>۰</td>\n",
       "      <td>2000cc مزدا، وانت، کارا تک کابین</td>\n",
       "      <td>سالم و بی خط و خش</td>\n",
       "      <td>271500000.0</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۱۲ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "      <td>نقدی</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>فرهنگ شهر</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32725 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         City Model_Year    Color  Mileage                             Brand  \\\n",
       "0      Tehran       ۱۳۷۶  نقره ای      ۵۳۲      نیسان، پاترول 4 در، 6 سیلندر   \n",
       "3      Tehran       ۱۳۹۶     سفید   ۸۰٬۰۰۰                    SE ،132 ،پراید   \n",
       "4      Tehran       ۱۳۹۳  نقره ای   ۸۰٬۰۰۰              پژو، GLX ،405 بنزینی   \n",
       "5      Tehran       ۱۳۹۳     سفید   ۸۵٬۰۰۰                   SD، V8 206 ،پژو   \n",
       "9      Tehran       ۲۰۱۶     سفید  ۱۰۰٬۰۰۰           سانگ یانگ، تیوولی، الیت   \n",
       "...       ...        ...      ...      ...                               ...   \n",
       "56396  Shiraz       ۱۳۹۵     مشکی   ۶۳٬۰۰۰            رنو، تندر 90، اتوماتیک   \n",
       "56397  Shiraz       ۱۳۸۳     یشمی  ۱۰۰٬۰۰۰                     پیکان، بنزینی   \n",
       "56398  Shiraz       ۲۰۱۲     سفید  ۱۷۲٬۰۰۰           سانگ یانگ، رکستون، ساده   \n",
       "56399  Shiraz       ۲۰۱۳     موکا  ۱۳۵٬۰۰۰          جیلی، Emgrand 7، دنده ای   \n",
       "56401  Shiraz       ۱۴۰۰  نقره ای        ۰  2000cc مزدا، وانت، کارا تک کابین   \n",
       "\n",
       "                   Body_Condition        Price Engine_Condition  \\\n",
       "0                        تمام رنگ  235000000.0             سالم   \n",
       "3               سالم و بی خط و خش  125500000.0             سالم   \n",
       "4               سالم و بی خط و خش  187000000.0             سالم   \n",
       "5                    خط و خش جزیی  215000000.0             سالم   \n",
       "9               سالم و بی خط و خش  830000000.0             سالم   \n",
       "...                           ...          ...              ...   \n",
       "56396           سالم و بی خط و خش  380000000.0             سالم   \n",
       "56397  صافکاری بی رنگ، در ۱ ناحیه   75000000.0             سالم   \n",
       "56398                خط و خش جزیی  930000000.0             سالم   \n",
       "56399                خط و خش جزیی  280000000.0             سالم   \n",
       "56401           سالم و بی خط و خش  271500000.0             سالم   \n",
       "\n",
       "      Chassis_Condition Third_party_insurance   Gearbox Selling_Method  \\\n",
       "0           سالم و پلمپ                 ۶ ماه   دنده ای           نقدی   \n",
       "3           سالم و پلمپ                 ۶ ماه   دنده ای           نقدی   \n",
       "4           سالم و پلمپ                 ۹ ماه   دنده ای           نقدی   \n",
       "5           سالم و پلمپ                 ۴ ماه   دنده ای           نقدی   \n",
       "9           سالم و پلمپ                 ۸ ماه  اتوماتیک           نقدی   \n",
       "...                 ...                   ...       ...            ...   \n",
       "56396       سالم و پلمپ                ۱۲ ماه   دنده ای           نقدی   \n",
       "56397       سالم و پلمپ                ۱۱ ماه   دنده ای           نقدی   \n",
       "56398       سالم و پلمپ                 ۳ ماه  اتوماتیک           نقدی   \n",
       "56399       سالم و پلمپ                 ۷ ماه   دنده ای           نقدی   \n",
       "56401       سالم و پلمپ                ۱۲ ماه   دنده ای           نقدی   \n",
       "\n",
       "             Time     Location  \n",
       "0      2022-03-26    آجودانیه   \n",
       "3      2022-03-26      پیروزی   \n",
       "4      2022-03-26      پیروزی   \n",
       "5      2022-03-05   یوسف آباد   \n",
       "9      2022-03-26     وردآورد   \n",
       "...           ...          ...  \n",
       "56396  2022-03-12  سینما سعدی   \n",
       "56397  2022-03-26      ابونصر   \n",
       "56398  2022-03-26  گلدشت حافظ   \n",
       "56399  2022-03-26   شریف آباد   \n",
       "56401  2022-03-05   فرهنگ شهر   \n",
       "\n",
       "[32725 rows x 14 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a403fb29",
   "metadata": {
    "papermill": {
     "duration": 0.01592,
     "end_time": "2024-03-12T14:58:05.993520",
     "exception": false,
     "start_time": "2024-03-12T14:58:05.977600",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Phase 2: Preprocess (P2: 18 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98e8f1c8",
   "metadata": {
    "papermill": {
     "duration": 0.015959,
     "end_time": "2024-03-12T14:58:06.025891",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.009932",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Print names of the columns and the number of rows in the dataset. **(P2-1: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "45076e68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:06.060522Z",
     "iopub.status.busy": "2024-03-12T14:58:06.060127Z",
     "iopub.status.idle": "2024-03-12T14:58:06.068051Z",
     "shell.execute_reply": "2024-03-12T14:58:06.066435Z"
    },
    "papermill": {
     "duration": 0.028262,
     "end_time": "2024-03-12T14:58:06.070492",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.042230",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['City', 'Model_Year', 'Color', 'Mileage', 'Brand', 'Body_Condition',\n",
      "       'Price', 'Engine_Condition', 'Chassis_Condition',\n",
      "       'Third_party_insurance', 'Gearbox', 'Selling_Method', 'Time',\n",
      "       'Location'],\n",
      "      dtype='object')\n",
      "32725\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(32725, 14)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# FILL HERE\n",
    "print(df.columns)\n",
    "print(len(df))\n",
    "(df.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa14fb63",
   "metadata": {
    "papermill": {
     "duration": 0.016241,
     "end_time": "2024-03-12T14:58:06.103385",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.087144",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Drop all rows where \"Selling_Method\" is not \"نقدی\", and then drop the columns \"Selling_Method\", \"Time\" and \"Location\". **(P2-2: 1 points)** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1b91b21c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:06.141163Z",
     "iopub.status.busy": "2024-03-12T14:58:06.140715Z",
     "iopub.status.idle": "2024-03-12T14:58:06.169612Z",
     "shell.execute_reply": "2024-03-12T14:58:06.168638Z"
    },
    "papermill": {
     "duration": 0.0491,
     "end_time": "2024-03-12T14:58:06.171872",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.122772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "df=df[df['Selling_Method']=='نقدی']\n",
    "df = df.drop(columns=['Selling_Method', 'Time','Location'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "969b3447",
   "metadata": {
    "papermill": {
     "duration": 0.083527,
     "end_time": "2024-03-12T14:58:06.272086",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.188559",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Retrieve the description of all columns in the dataset. **(P2-3: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5f8f76df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:06.308516Z",
     "iopub.status.busy": "2024-03-12T14:58:06.307668Z",
     "iopub.status.idle": "2024-03-12T14:58:06.384584Z",
     "shell.execute_reply": "2024-03-12T14:58:06.383464Z"
    },
    "papermill": {
     "duration": 0.097737,
     "end_time": "2024-03-12T14:58:06.386913",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.289176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Model_Year</th>\n",
       "      <th>Color</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Body_Condition</th>\n",
       "      <th>Price</th>\n",
       "      <th>Engine_Condition</th>\n",
       "      <th>Chassis_Condition</th>\n",
       "      <th>Third_party_insurance</th>\n",
       "      <th>Gearbox</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>31880</td>\n",
       "      <td>31880</td>\n",
       "      <td>31880</td>\n",
       "      <td>31880</td>\n",
       "      <td>31880</td>\n",
       "      <td>31880</td>\n",
       "      <td>3.188000e+04</td>\n",
       "      <td>31880</td>\n",
       "      <td>31880</td>\n",
       "      <td>31880</td>\n",
       "      <td>31880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>4</td>\n",
       "      <td>71</td>\n",
       "      <td>38</td>\n",
       "      <td>1860</td>\n",
       "      <td>842</td>\n",
       "      <td>28</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Tehran</td>\n",
       "      <td>۱۴۰۰</td>\n",
       "      <td>سفید</td>\n",
       "      <td>۰</td>\n",
       "      <td>SE ،131 ،پراید</td>\n",
       "      <td>سالم و بی خط و خش</td>\n",
       "      <td>NaN</td>\n",
       "      <td>سالم</td>\n",
       "      <td>سالم و پلمپ</td>\n",
       "      <td>۱۲ ماه</td>\n",
       "      <td>دنده ای</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>17645</td>\n",
       "      <td>3528</td>\n",
       "      <td>17841</td>\n",
       "      <td>2239</td>\n",
       "      <td>1704</td>\n",
       "      <td>18044</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31536</td>\n",
       "      <td>31559</td>\n",
       "      <td>6156</td>\n",
       "      <td>25080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.172697e+08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.925027e+08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000e+07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.420000e+08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.050000e+08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.400000e+08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.100000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          City Model_Year  Color Mileage           Brand     Body_Condition  \\\n",
       "count    31880      31880  31880   31880           31880              31880   \n",
       "unique       4         71     38    1860             842                 28   \n",
       "top     Tehran       ۱۴۰۰   سفید       ۰  SE ،131 ،پراید  سالم و بی خط و خش   \n",
       "freq     17645       3528  17841    2239            1704              18044   \n",
       "mean       NaN        NaN    NaN     NaN             NaN                NaN   \n",
       "std        NaN        NaN    NaN     NaN             NaN                NaN   \n",
       "min        NaN        NaN    NaN     NaN             NaN                NaN   \n",
       "25%        NaN        NaN    NaN     NaN             NaN                NaN   \n",
       "50%        NaN        NaN    NaN     NaN             NaN                NaN   \n",
       "75%        NaN        NaN    NaN     NaN             NaN                NaN   \n",
       "max        NaN        NaN    NaN     NaN             NaN                NaN   \n",
       "\n",
       "               Price Engine_Condition Chassis_Condition Third_party_insurance  \\\n",
       "count   3.188000e+04            31880             31880                 31880   \n",
       "unique           NaN                3                 3                    12   \n",
       "top              NaN             سالم       سالم و پلمپ                ۱۲ ماه   \n",
       "freq             NaN            31536             31559                  6156   \n",
       "mean    3.172697e+08              NaN               NaN                   NaN   \n",
       "std     3.925027e+08              NaN               NaN                   NaN   \n",
       "min     1.000000e+07              NaN               NaN                   NaN   \n",
       "25%     1.420000e+08              NaN               NaN                   NaN   \n",
       "50%     2.050000e+08              NaN               NaN                   NaN   \n",
       "75%     3.400000e+08              NaN               NaN                   NaN   \n",
       "max     9.100000e+09              NaN               NaN                   NaN   \n",
       "\n",
       "        Gearbox  \n",
       "count     31880  \n",
       "unique        2  \n",
       "top     دنده ای  \n",
       "freq      25080  \n",
       "mean        NaN  \n",
       "std         NaN  \n",
       "min         NaN  \n",
       "25%         NaN  \n",
       "50%         NaN  \n",
       "75%         NaN  \n",
       "max         NaN  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# FILL HERE\n",
    "df.describe(include = 'all')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "123393a5",
   "metadata": {
    "papermill": {
     "duration": 0.016888,
     "end_time": "2024-03-12T14:58:06.421203",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.404315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**We need to perform some operations on certain columns to make the entire dataset suitable for a Linear Regression task.**\n",
    "\n",
    "Change the 'Model_Year' type to numerical. Convert all years written in the Gregorian format to the Solar format. Then, take 1365 as the start year and count the number of years passed since 1365. For example, the year 1399 must be substituted with 34, and the cars tagged with 'قبل از ۱۳۶۶' must be substituted with 0. **(P2-4: 3 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9a4d78cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:06.457550Z",
     "iopub.status.busy": "2024-03-12T14:58:06.456715Z",
     "iopub.status.idle": "2024-03-12T14:58:06.496463Z",
     "shell.execute_reply": "2024-03-12T14:58:06.495607Z"
    },
    "papermill": {
     "duration": 0.060429,
     "end_time": "2024-03-12T14:58:06.498690",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.438261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def change_to_solar(date):\n",
    "    # FILL HERE\n",
    "    if date=='قبل از ۱۳۶۶':\n",
    "        return 0\n",
    "    if int(date)>1500:\n",
    "        date = int(date)-621\n",
    "    if int(date) >1365:\n",
    "        return int(date)-1365\n",
    "    else :\n",
    "        return 0\n",
    "    pass\n",
    "\n",
    "df['Model_Year'] = df['Model_Year'].apply(change_to_solar)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61f6e541",
   "metadata": {
    "papermill": {
     "duration": 0.016882,
     "end_time": "2024-03-12T14:58:06.532866",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.515984",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Change the types of 'Mileage' and 'Third_party_insurance' to numerical. **(P2-5: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f64e499b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:06.568888Z",
     "iopub.status.busy": "2024-03-12T14:58:06.568438Z",
     "iopub.status.idle": "2024-03-12T14:58:06.648437Z",
     "shell.execute_reply": "2024-03-12T14:58:06.647303Z"
    },
    "papermill": {
     "duration": 0.101022,
     "end_time": "2024-03-12T14:58:06.651073",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.550051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "def Mileage_to_num(mil):\n",
    "    if type(mil) != str:\n",
    "        return(float(mil))\n",
    "    else:\n",
    "        return int(mil.split('٬')[0])*(10**(3*(len(mil.split('٬'))-1)))\n",
    "        \n",
    "    \n",
    "df['Mileage']=df['Mileage'].apply(Mileage_to_num)\n",
    "df['Third_party_insurance']=df['Third_party_insurance'].apply(lambda x: int((x.split())[0]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1064a76e",
   "metadata": {
    "papermill": {
     "duration": 0.016906,
     "end_time": "2024-03-12T14:58:06.685128",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.668222",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For 'Engine_Condition', map 'سالم' to 2, 'تعویض شده' to 1, and 'نیاز به تعمیر' to 0. **(P2-6: 2 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f07ef059",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:06.721235Z",
     "iopub.status.busy": "2024-03-12T14:58:06.720807Z",
     "iopub.status.idle": "2024-03-12T14:58:06.741163Z",
     "shell.execute_reply": "2024-03-12T14:58:06.740062Z"
    },
    "papermill": {
     "duration": 0.040958,
     "end_time": "2024-03-12T14:58:06.743219",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.702261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ENGINE_WORKING = \"سالم\"\n",
    "ENGINE_SUBSTITUTED = \"تعویض شده\"\n",
    "ENGINE_NEEDS_TO_BE_FIXED = \"نیاز به تعمیر\"\n",
    "engine_condition_map = {\n",
    "    ENGINE_WORKING: 2,\n",
    "    ENGINE_SUBSTITUTED: 1,\n",
    "    ENGINE_NEEDS_TO_BE_FIXED: 0\n",
    "}\n",
    "\n",
    "# FILL HERE\n",
    "def Engine_trasform(eng):\n",
    "    if eng==ENGINE_WORKING:\n",
    "        return 2\n",
    "    if eng==ENGINE_SUBSTITUTED:\n",
    "        return 1\n",
    "    if eng==ENGINE_NEEDS_TO_BE_FIXED:\n",
    "        return 0\n",
    "df['Engine_Condition']=df['Engine_Condition'].apply(Engine_trasform)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "077659d2",
   "metadata": {
    "papermill": {
     "duration": 0.016841,
     "end_time": "2024-03-12T14:58:06.777517",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.760676",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For 'Chassis_Condition', map 'سالم و پلمپ' to 2, 'ضربه خورده' to 1, and 'رنگ شده' to 0. **(P2-7: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a21c066b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:06.814169Z",
     "iopub.status.busy": "2024-03-12T14:58:06.813702Z",
     "iopub.status.idle": "2024-03-12T14:58:06.834072Z",
     "shell.execute_reply": "2024-03-12T14:58:06.832967Z"
    },
    "papermill": {
     "duration": 0.04144,
     "end_time": "2024-03-12T14:58:06.836335",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.794895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "CHASSIS_WORKING = \"سالم و پلمپ\"\n",
    "CHASSIS_SUBSTITUTED = \"ضربه خورده\"\n",
    "CHASSIS_NEEDS_TO_BE_FIXED = \"رنگ شده\"\n",
    "chassis_condition_map = {\n",
    "    CHASSIS_WORKING: 2,\n",
    "    CHASSIS_SUBSTITUTED: 1,\n",
    "    CHASSIS_NEEDS_TO_BE_FIXED: 0\n",
    "}\n",
    "\n",
    "# FILL HERE\n",
    "\n",
    "def Chassis_Condition_trasform(chas):\n",
    "    if chas==CHASSIS_WORKING:\n",
    "        return 2\n",
    "    if chas==CHASSIS_SUBSTITUTED:\n",
    "        return 1\n",
    "    if chas==CHASSIS_NEEDS_TO_BE_FIXED:\n",
    "        return 0\n",
    "\n",
    "df['Chassis_Condition']=df['Chassis_Condition'].apply(Chassis_Condition_trasform)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2666466",
   "metadata": {
    "papermill": {
     "duration": 0.016839,
     "end_time": "2024-03-12T14:58:06.870472",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.853633",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For 'Gearbox', map 'دنده ای' to 0 and 'اتوماتیک' to 1. **(P2-8: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4e26c9d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:06.906793Z",
     "iopub.status.busy": "2024-03-12T14:58:06.906338Z",
     "iopub.status.idle": "2024-03-12T14:58:06.925776Z",
     "shell.execute_reply": "2024-03-12T14:58:06.924613Z"
    },
    "papermill": {
     "duration": 0.040278,
     "end_time": "2024-03-12T14:58:06.927838",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.887560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "GEARBOX_MANUAL = \"دنده ای\"\n",
    "GEARBOX_AUTO = \"اتوماتیک\"\n",
    "gearbox_map = {\n",
    "    GEARBOX_AUTO: 1,\n",
    "    GEARBOX_MANUAL: 0\n",
    "}\n",
    "\n",
    "# FILL HERE\n",
    "df['Gearbox']=df['Gearbox'].apply(lambda x: 1 if x==GEARBOX_AUTO else 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95a20d78",
   "metadata": {
    "papermill": {
     "duration": 0.016913,
     "end_time": "2024-03-12T14:58:06.961994",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.945081",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Convert the \"City\" column into one-hot format. Then drop the \"City\" column. You will need to create a column for each unique City, and in each row, the column corresponding to its City will be 1, and other columns will be 0. **(P2-9: 2 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7bbcc7c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:06.998139Z",
     "iopub.status.busy": "2024-03-12T14:58:06.997682Z",
     "iopub.status.idle": "2024-03-12T14:58:07.026739Z",
     "shell.execute_reply": "2024-03-12T14:58:07.025785Z"
    },
    "papermill": {
     "duration": 0.049973,
     "end_time": "2024-03-12T14:58:07.029076",
     "exception": false,
     "start_time": "2024-03-12T14:58:06.979103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "df=pd.get_dummies(df, columns=['City'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5d63091",
   "metadata": {
    "papermill": {
     "duration": 0.016669,
     "end_time": "2024-03-12T14:58:07.063136",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.046467",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Do the same steps for \"Color\" and \"Body_Condition\" columns **(P2-10: 2 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3c407b19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:07.098860Z",
     "iopub.status.busy": "2024-03-12T14:58:07.098421Z",
     "iopub.status.idle": "2024-03-12T14:58:07.114013Z",
     "shell.execute_reply": "2024-03-12T14:58:07.112961Z"
    },
    "papermill": {
     "duration": 0.036257,
     "end_time": "2024-03-12T14:58:07.116366",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.080109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "\n",
    "df=pd.get_dummies(df, columns=['Color'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "bb376be1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:07.152469Z",
     "iopub.status.busy": "2024-03-12T14:58:07.152064Z",
     "iopub.status.idle": "2024-03-12T14:58:07.171641Z",
     "shell.execute_reply": "2024-03-12T14:58:07.170643Z"
    },
    "papermill": {
     "duration": 0.040444,
     "end_time": "2024-03-12T14:58:07.174083",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.133639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "\n",
    "df=pd.get_dummies(df, columns=['Body_Condition'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "680ab74b",
   "metadata": {
    "papermill": {
     "duration": 0.016732,
     "end_time": "2024-03-12T14:58:07.208266",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.191534",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Up until now, you have learned how to clean such a dataset. now, let's take other cars aside and focus on the \"Pride\". drop all the items in the dataframe where the \"Brand\" does not contain \"پراید\" and drop the \"Brand\" column **(P2-11: 3 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c05668e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:07.244392Z",
     "iopub.status.busy": "2024-03-12T14:58:07.243991Z",
     "iopub.status.idle": "2024-03-12T14:58:07.278575Z",
     "shell.execute_reply": "2024-03-12T14:58:07.277746Z"
    },
    "papermill": {
     "duration": 0.055234,
     "end_time": "2024-03-12T14:58:07.280824",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.225590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "def loook_for_Pride(x):\n",
    "    x=x.split('،')\n",
    "    for i in x:\n",
    "        if i==\"پراید\":\n",
    "            return True\n",
    "        \n",
    "df['help']=df['Brand'].apply(loook_for_Pride)\n",
    "df=df[df['help']==True]\n",
    "df = df.drop(columns=['help', 'Brand'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89f3113a",
   "metadata": {
    "papermill": {
     "duration": 0.016836,
     "end_time": "2024-03-12T14:58:07.315221",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.298385",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Phase 3: Exploration (P3: 10 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6e760013",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:07.351205Z",
     "iopub.status.busy": "2024-03-12T14:58:07.350755Z",
     "iopub.status.idle": "2024-03-12T14:58:07.372937Z",
     "shell.execute_reply": "2024-03-12T14:58:07.371899Z"
    },
    "papermill": {
     "duration": 0.043034,
     "end_time": "2024-03-12T14:58:07.375228",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.332194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Year</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Price</th>\n",
       "      <th>Engine_Condition</th>\n",
       "      <th>Chassis_Condition</th>\n",
       "      <th>Third_party_insurance</th>\n",
       "      <th>Gearbox</th>\n",
       "      <th>City_Isfahan</th>\n",
       "      <th>City_Mashhad</th>\n",
       "      <th>City_Shiraz</th>\n",
       "      <th>...</th>\n",
       "      <th>Body_Condition_سالم و بی خط و خش</th>\n",
       "      <th>Body_Condition_صافکاری بی رنگ</th>\n",
       "      <th>Body_Condition_صافکاری بی رنگ، در ۱ ناحیه</th>\n",
       "      <th>Body_Condition_صافکاری بی رنگ، در ۱۰ ناحیه</th>\n",
       "      <th>Body_Condition_صافکاری بی رنگ، در ۲ ناحیه</th>\n",
       "      <th>Body_Condition_صافکاری بی رنگ، در ۳ ناحیه</th>\n",
       "      <th>Body_Condition_صافکاری بی رنگ، در ۴ ناحیه</th>\n",
       "      <th>Body_Condition_صافکاری بی رنگ، در ۵ ناحیه</th>\n",
       "      <th>Body_Condition_صافکاری بی رنگ، در ۶ ناحیه</th>\n",
       "      <th>Body_Condition_صافکاری بی رنگ، در ۹ ناحیه</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>31</td>\n",
       "      <td>80000</td>\n",
       "      <td>125500000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>31</td>\n",
       "      <td>80000</td>\n",
       "      <td>135000000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>28</td>\n",
       "      <td>300000</td>\n",
       "      <td>110000000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>33</td>\n",
       "      <td>40000</td>\n",
       "      <td>152000000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>32</td>\n",
       "      <td>42000</td>\n",
       "      <td>145000000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 77 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Model_Year  Mileage        Price  Engine_Condition  Chassis_Condition  \\\n",
       "3           31    80000  125500000.0                 2                  2   \n",
       "12          31    80000  135000000.0                 2                  2   \n",
       "21          28   300000  110000000.0                 2                  2   \n",
       "46          33    40000  152000000.0                 2                  2   \n",
       "63          32    42000  145000000.0                 2                  2   \n",
       "\n",
       "    Third_party_insurance  Gearbox  City_Isfahan  City_Mashhad  City_Shiraz  \\\n",
       "3                       6        0         False         False        False   \n",
       "12                     11        0         False         False        False   \n",
       "21                      6        0         False         False        False   \n",
       "46                     10        0         False         False        False   \n",
       "63                      6        0         False         False        False   \n",
       "\n",
       "    ...  Body_Condition_سالم و بی خط و خش  Body_Condition_صافکاری بی رنگ  \\\n",
       "3   ...                              True                          False   \n",
       "12  ...                             False                          False   \n",
       "21  ...                             False                          False   \n",
       "46  ...                              True                          False   \n",
       "63  ...                              True                          False   \n",
       "\n",
       "    Body_Condition_صافکاری بی رنگ، در ۱ ناحیه  \\\n",
       "3                                       False   \n",
       "12                                      False   \n",
       "21                                      False   \n",
       "46                                      False   \n",
       "63                                      False   \n",
       "\n",
       "    Body_Condition_صافکاری بی رنگ، در ۱۰ ناحیه  \\\n",
       "3                                        False   \n",
       "12                                       False   \n",
       "21                                       False   \n",
       "46                                       False   \n",
       "63                                       False   \n",
       "\n",
       "    Body_Condition_صافکاری بی رنگ، در ۲ ناحیه  \\\n",
       "3                                       False   \n",
       "12                                      False   \n",
       "21                                      False   \n",
       "46                                      False   \n",
       "63                                      False   \n",
       "\n",
       "    Body_Condition_صافکاری بی رنگ، در ۳ ناحیه  \\\n",
       "3                                       False   \n",
       "12                                      False   \n",
       "21                                      False   \n",
       "46                                      False   \n",
       "63                                      False   \n",
       "\n",
       "    Body_Condition_صافکاری بی رنگ، در ۴ ناحیه  \\\n",
       "3                                       False   \n",
       "12                                      False   \n",
       "21                                      False   \n",
       "46                                      False   \n",
       "63                                      False   \n",
       "\n",
       "    Body_Condition_صافکاری بی رنگ، در ۵ ناحیه  \\\n",
       "3                                       False   \n",
       "12                                      False   \n",
       "21                                      False   \n",
       "46                                      False   \n",
       "63                                      False   \n",
       "\n",
       "    Body_Condition_صافکاری بی رنگ، در ۶ ناحیه  \\\n",
       "3                                       False   \n",
       "12                                      False   \n",
       "21                                      False   \n",
       "46                                      False   \n",
       "63                                      False   \n",
       "\n",
       "    Body_Condition_صافکاری بی رنگ، در ۹ ناحیه  \n",
       "3                                       False  \n",
       "12                                      False  \n",
       "21                                      False  \n",
       "46                                      False  \n",
       "63                                      False  \n",
       "\n",
       "[5 rows x 77 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8691c9d",
   "metadata": {
    "papermill": {
     "duration": 0.017291,
     "end_time": "2024-03-12T14:58:07.410307",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.393016",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Create **a copy** of the first 7 columns of the dataframe (We won't visualize the one-hot features. so we don't need them). **(P3-1: 2 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e4566cc2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:07.448098Z",
     "iopub.status.busy": "2024-03-12T14:58:07.446898Z",
     "iopub.status.idle": "2024-03-12T14:58:07.453097Z",
     "shell.execute_reply": "2024-03-12T14:58:07.452053Z"
    },
    "papermill": {
     "duration": 0.02713,
     "end_time": "2024-03-12T14:58:07.455221",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.428091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "df_small = df[df.columns[:7]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a025ac96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:07.492996Z",
     "iopub.status.busy": "2024-03-12T14:58:07.492242Z",
     "iopub.status.idle": "2024-03-12T14:58:07.504976Z",
     "shell.execute_reply": "2024-03-12T14:58:07.503908Z"
    },
    "papermill": {
     "duration": 0.034142,
     "end_time": "2024-03-12T14:58:07.507046",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.472904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Year</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Price</th>\n",
       "      <th>Engine_Condition</th>\n",
       "      <th>Chassis_Condition</th>\n",
       "      <th>Third_party_insurance</th>\n",
       "      <th>Gearbox</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>31</td>\n",
       "      <td>80000</td>\n",
       "      <td>125500000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>31</td>\n",
       "      <td>80000</td>\n",
       "      <td>135000000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>28</td>\n",
       "      <td>300000</td>\n",
       "      <td>110000000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>33</td>\n",
       "      <td>40000</td>\n",
       "      <td>152000000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>32</td>\n",
       "      <td>42000</td>\n",
       "      <td>145000000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Model_Year  Mileage        Price  Engine_Condition  Chassis_Condition  \\\n",
       "3           31    80000  125500000.0                 2                  2   \n",
       "12          31    80000  135000000.0                 2                  2   \n",
       "21          28   300000  110000000.0                 2                  2   \n",
       "46          33    40000  152000000.0                 2                  2   \n",
       "63          32    42000  145000000.0                 2                  2   \n",
       "\n",
       "    Third_party_insurance  Gearbox  \n",
       "3                       6        0  \n",
       "12                     11        0  \n",
       "21                      6        0  \n",
       "46                     10        0  \n",
       "63                      6        0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_small.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3335856b",
   "metadata": {
    "papermill": {
     "duration": 0.017519,
     "end_time": "2024-03-12T14:58:07.543022",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.525503",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Utilize histograms and box plots to visualize the distribution of the  **(P3-2: 5 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6dc82e87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:07.580484Z",
     "iopub.status.busy": "2024-03-12T14:58:07.580058Z",
     "iopub.status.idle": "2024-03-12T14:58:10.022272Z",
     "shell.execute_reply": "2024-03-12T14:58:10.021046Z"
    },
    "papermill": {
     "duration": 2.463917,
     "end_time": "2024-03-12T14:58:10.024700",
     "exception": false,
     "start_time": "2024-03-12T14:58:07.560783",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 7 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 7 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# FILL HERE\n",
    "\n",
    "\n",
    "# Check if there are any numerical columns\n",
    "if df_small.empty:\n",
    "    print(\"No numerical columns found in df_small.\")\n",
    "else:\n",
    "    # Separate figures for histograms and box plots\n",
    "    plt.figure(figsize=(10, 6))  # Adjust figure size as needed\n",
    "\n",
    "    # Histograms for all numerical columns\n",
    "    for i, col in enumerate(df_small.columns):\n",
    "        plt.subplot(2, len(df_small.columns) // 2 + 1, i + 1)  # Grid layout for subplots\n",
    "        plt.hist(df_small[col], bins=10, edgecolor='black', alpha=0.7)\n",
    "        plt.title(col)\n",
    "        plt.xlabel(col + ' Value')\n",
    "        plt.ylabel('Frequency')\n",
    "        plt.grid(True)  # Add gridlines for better readability\n",
    "\n",
    "    plt.suptitle('Histograms of Numerical Features in df_small')\n",
    "    plt.tight_layout()  # Adjust spacing between subplots\n",
    "\n",
    "    plt.figure(figsize=(10, 6))  # Create a new figure for box plots\n",
    "\n",
    "    # Box plots for all numerical columns\n",
    "    for i, col in enumerate(df_small.columns):\n",
    "        plt.subplot(2, len(df_small.columns) // 2 + 1, i + 1)  # Grid layout for subplots\n",
    "        plt.boxplot(df_small[col], notch=True, patch_artist=True, vert=True, medianprops={'linewidth': 2, 'color': 'blue'})\n",
    "        plt.title(col)\n",
    "        plt.xlabel(col + ' Value')\n",
    "        plt.ylabel('Data')\n",
    "        plt.grid(True)  # Add gridlines for better readability\n",
    "\n",
    "    plt.suptitle('Box Plots of Numerical Features in df_small')\n",
    "    plt.tight_layout()  # Adjust spacing between subplots\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5bb924b",
   "metadata": {
    "papermill": {
     "duration": 0.020869,
     "end_time": "2024-03-12T14:58:10.066803",
     "exception": false,
     "start_time": "2024-03-12T14:58:10.045934",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Print the correlation coefficients matrix **(P3-3: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7362b4a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:10.110100Z",
     "iopub.status.busy": "2024-03-12T14:58:10.109623Z",
     "iopub.status.idle": "2024-03-12T14:58:10.133549Z",
     "shell.execute_reply": "2024-03-12T14:58:10.132439Z"
    },
    "papermill": {
     "duration": 0.048672,
     "end_time": "2024-03-12T14:58:10.136162",
     "exception": false,
     "start_time": "2024-03-12T14:58:10.087490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       Model_Year   Mileage     Price  Engine_Condition  \\\n",
      "Model_Year               1.000000 -0.652740  0.889633          0.186892   \n",
      "Mileage                 -0.652740  1.000000 -0.645502         -0.080692   \n",
      "Price                    0.889633 -0.645502  1.000000          0.183443   \n",
      "Engine_Condition         0.186892 -0.080692  0.183443          1.000000   \n",
      "Chassis_Condition        0.260759 -0.166886  0.281362          0.092767   \n",
      "Third_party_insurance   -0.031159  0.013900 -0.010815          0.007943   \n",
      "Gearbox                 -0.102484  0.032659 -0.050104          0.004275   \n",
      "\n",
      "                       Chassis_Condition  Third_party_insurance   Gearbox  \n",
      "Model_Year                      0.260759              -0.031159 -0.102484  \n",
      "Mileage                        -0.166886               0.013900  0.032659  \n",
      "Price                           0.281362              -0.010815 -0.050104  \n",
      "Engine_Condition                0.092767               0.007943  0.004275  \n",
      "Chassis_Condition               1.000000               0.000789  0.007052  \n",
      "Third_party_insurance           0.000789               1.000000  0.002499  \n",
      "Gearbox                         0.007052               0.002499  1.000000  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Year</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Price</th>\n",
       "      <th>Engine_Condition</th>\n",
       "      <th>Chassis_Condition</th>\n",
       "      <th>Third_party_insurance</th>\n",
       "      <th>Gearbox</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Model_Year</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.652740</td>\n",
       "      <td>0.889633</td>\n",
       "      <td>0.186892</td>\n",
       "      <td>0.260759</td>\n",
       "      <td>-0.031159</td>\n",
       "      <td>-0.102484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mileage</th>\n",
       "      <td>-0.652740</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.645502</td>\n",
       "      <td>-0.080692</td>\n",
       "      <td>-0.166886</td>\n",
       "      <td>0.013900</td>\n",
       "      <td>0.032659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <td>0.889633</td>\n",
       "      <td>-0.645502</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.183443</td>\n",
       "      <td>0.281362</td>\n",
       "      <td>-0.010815</td>\n",
       "      <td>-0.050104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Engine_Condition</th>\n",
       "      <td>0.186892</td>\n",
       "      <td>-0.080692</td>\n",
       "      <td>0.183443</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.092767</td>\n",
       "      <td>0.007943</td>\n",
       "      <td>0.004275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chassis_Condition</th>\n",
       "      <td>0.260759</td>\n",
       "      <td>-0.166886</td>\n",
       "      <td>0.281362</td>\n",
       "      <td>0.092767</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000789</td>\n",
       "      <td>0.007052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Third_party_insurance</th>\n",
       "      <td>-0.031159</td>\n",
       "      <td>0.013900</td>\n",
       "      <td>-0.010815</td>\n",
       "      <td>0.007943</td>\n",
       "      <td>0.000789</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.002499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gearbox</th>\n",
       "      <td>-0.102484</td>\n",
       "      <td>0.032659</td>\n",
       "      <td>-0.050104</td>\n",
       "      <td>0.004275</td>\n",
       "      <td>0.007052</td>\n",
       "      <td>0.002499</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Model_Year   Mileage     Price  Engine_Condition  \\\n",
       "Model_Year               1.000000 -0.652740  0.889633          0.186892   \n",
       "Mileage                 -0.652740  1.000000 -0.645502         -0.080692   \n",
       "Price                    0.889633 -0.645502  1.000000          0.183443   \n",
       "Engine_Condition         0.186892 -0.080692  0.183443          1.000000   \n",
       "Chassis_Condition        0.260759 -0.166886  0.281362          0.092767   \n",
       "Third_party_insurance   -0.031159  0.013900 -0.010815          0.007943   \n",
       "Gearbox                 -0.102484  0.032659 -0.050104          0.004275   \n",
       "\n",
       "                       Chassis_Condition  Third_party_insurance   Gearbox  \n",
       "Model_Year                      0.260759              -0.031159 -0.102484  \n",
       "Mileage                        -0.166886               0.013900  0.032659  \n",
       "Price                           0.281362              -0.010815 -0.050104  \n",
       "Engine_Condition                0.092767               0.007943  0.004275  \n",
       "Chassis_Condition               1.000000               0.000789  0.007052  \n",
       "Third_party_insurance           0.000789               1.000000  0.002499  \n",
       "Gearbox                         0.007052               0.002499  1.000000  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# FILL HERE\n",
    "print(df_small.corr())\n",
    "df_small.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b527541f",
   "metadata": {
    "papermill": {
     "duration": 0.021611,
     "end_time": "2024-03-12T14:58:10.179036",
     "exception": false,
     "start_time": "2024-03-12T14:58:10.157425",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Plot `Price` plot according to`Mileage` using `seaborn.scatterplot` **(P3-4: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d10b5763",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:10.223814Z",
     "iopub.status.busy": "2024-03-12T14:58:10.222609Z",
     "iopub.status.idle": "2024-03-12T14:58:10.492006Z",
     "shell.execute_reply": "2024-03-12T14:58:10.490703Z"
    },
    "papermill": {
     "duration": 0.293928,
     "end_time": "2024-03-12T14:58:10.494201",
     "exception": false,
     "start_time": "2024-03-12T14:58:10.200273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# FILL HERE\n",
    "\n",
    "sns.scatterplot(x='Mileage', y='Price', data=df_small , color='crimson')\n",
    "\n",
    "# Add a title and axis labels\n",
    "plt.title('Price vs. Mileage')\n",
    "plt.xlabel('Mileage')\n",
    "plt.ylabel('Price')\n",
    "\n",
    "# Optional: Customize the plot further\n",
    "sns.set_style(\"whitegrid\")  # Change the background style\n",
    "plt.grid(True)  # Add gridlines\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28882c05",
   "metadata": {
    "papermill": {
     "duration": 0.022133,
     "end_time": "2024-03-12T14:58:10.539758",
     "exception": false,
     "start_time": "2024-03-12T14:58:10.517625",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Plot `Model_Year` plot according to`Gearbox` using `seaborn.lineplot` **(P3-5: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f9f91b4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:10.587834Z",
     "iopub.status.busy": "2024-03-12T14:58:10.586925Z",
     "iopub.status.idle": "2024-03-12T14:58:10.997409Z",
     "shell.execute_reply": "2024-03-12T14:58:10.996508Z"
    },
    "papermill": {
     "duration": 0.436991,
     "end_time": "2024-03-12T14:58:10.999485",
     "exception": false,
     "start_time": "2024-03-12T14:58:10.562494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# FILL HERE\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.lineplot(x='Gearbox', y='Model_Year', data=df, marker='o' , color='crimson')\n",
    "plt.title('Line Plot of Model_Year vs Gearbox')\n",
    "plt.xlabel('Gearbox')\n",
    "plt.ylabel('Model_Year')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39fa08ab",
   "metadata": {
    "papermill": {
     "duration": 0.022273,
     "end_time": "2024-03-12T14:58:11.045122",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.022849",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It's clear that some columns are more correlated with the price. In practice, when dealing with many columns, we might set aside the least correlated ones and focus on the rest. However, here we will continue with all columns of 'df'."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6375750c",
   "metadata": {
    "papermill": {
     "duration": 0.022503,
     "end_time": "2024-03-12T14:58:11.090554",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.068051",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Phase 4: Training (P4: 55 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f58c1335",
   "metadata": {
    "papermill": {
     "duration": 0.022639,
     "end_time": "2024-03-12T14:58:11.136035",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.113396",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sec 1: Preparing features and Targets (P4-Sec1: 10 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78c1c51e",
   "metadata": {
    "papermill": {
     "duration": 0.024609,
     "end_time": "2024-03-12T14:58:11.183886",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.159277",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Extract only the features from the dataframe by removing the target column (\"Price\").\n",
    "Note: Do not remove the previous dataframe. **(P4-1-1: 2 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3c6c9905",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:11.232057Z",
     "iopub.status.busy": "2024-03-12T14:58:11.231415Z",
     "iopub.status.idle": "2024-03-12T14:58:11.236546Z",
     "shell.execute_reply": "2024-03-12T14:58:11.235801Z"
    },
    "papermill": {
     "duration": 0.031407,
     "end_time": "2024-03-12T14:58:11.238502",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.207095",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "features=df.drop('Price',axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69321f41",
   "metadata": {
    "papermill": {
     "duration": 0.022529,
     "end_time": "2024-03-12T14:58:11.283848",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.261319",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Convert the new dataframe into a numpy array. **(P4-1-2: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "2bb36a99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:11.331318Z",
     "iopub.status.busy": "2024-03-12T14:58:11.330657Z",
     "iopub.status.idle": "2024-03-12T14:58:11.341633Z",
     "shell.execute_reply": "2024-03-12T14:58:11.340735Z"
    },
    "papermill": {
     "duration": 0.037479,
     "end_time": "2024-03-12T14:58:11.344012",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.306533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "x = features.to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "139a5fe8",
   "metadata": {
    "papermill": {
     "duration": 0.022234,
     "end_time": "2024-03-12T14:58:11.389011",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.366777",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Get the target column from the previous dataframe and convert it to another numpy array named y **(P4-1-3: 1 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "53c24d81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:11.436768Z",
     "iopub.status.busy": "2024-03-12T14:58:11.436088Z",
     "iopub.status.idle": "2024-03-12T14:58:11.440631Z",
     "shell.execute_reply": "2024-03-12T14:58:11.439776Z"
    },
    "papermill": {
     "duration": 0.031328,
     "end_time": "2024-03-12T14:58:11.443099",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.411771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FILL HERE\n",
    "y = df.Price.to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7670cd26",
   "metadata": {
    "papermill": {
     "duration": 0.022077,
     "end_time": "2024-03-12T14:58:11.487901",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.465824",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Split the dataset into two parts such that the training set (denoted a`x_train` and `y_train`), contains 80% of the samples. **(P4-1-4: 3 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "858c81af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:11.536207Z",
     "iopub.status.busy": "2024-03-12T14:58:11.535802Z",
     "iopub.status.idle": "2024-03-12T14:58:11.685872Z",
     "shell.execute_reply": "2024-03-12T14:58:11.684907Z"
    },
    "papermill": {
     "duration": 0.1771,
     "end_time": "2024-03-12T14:58:11.688494",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.511394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(x , y , test_size = 0.2 , random_state=42 ) # FILL HERE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "264cc3c4",
   "metadata": {
    "papermill": {
     "duration": 0.023285,
     "end_time": "2024-03-12T14:58:11.735478",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.712193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Fit MinMaxScaler on the training data and apply it to the entire dataset to normalize all columns of data into the range [0-1]. **(P4-1-5: 4 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "adde6b5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:11.783881Z",
     "iopub.status.busy": "2024-03-12T14:58:11.783408Z",
     "iopub.status.idle": "2024-03-12T14:58:11.816957Z",
     "shell.execute_reply": "2024-03-12T14:58:11.815782Z"
    },
    "papermill": {
     "duration": 0.060871,
     "end_time": "2024-03-12T14:58:11.819621",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.758750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "# FILL HERE\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "scaler.fit(x_train)\n",
    "x_train = scaler.transform(x_train)\n",
    "x_test = scaler.transform(x_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb3e049f",
   "metadata": {
    "papermill": {
     "duration": 0.022657,
     "end_time": "2024-03-12T14:58:11.865378",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.842721",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sec 2: Linear Regression, Lasso and Ridge Regression from Scratch (P4-Sec2: 40 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b7a226a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:11.913550Z",
     "iopub.status.busy": "2024-03-12T14:58:11.913086Z",
     "iopub.status.idle": "2024-03-12T14:58:11.928349Z",
     "shell.execute_reply": "2024-03-12T14:58:11.927191Z"
    },
    "papermill": {
     "duration": 0.042553,
     "end_time": "2024-03-12T14:58:11.930875",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.888322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "class CustomLinearRegression:\n",
    "    def __init__(self, regularization=None, alpha=1.0):\n",
    "        '''\n",
    "        Initialize the CustomLinearRegression object.\n",
    "\n",
    "        Parameters:\n",
    "        regularization (str or None): Type of regularization. Can be None, 'lasso', or 'ridge'.\n",
    "        alpha (float): Regularization strength parameter.\n",
    "        '''\n",
    "        self.regularization = regularization\n",
    "        self.alpha = alpha\n",
    "        self.weights = None\n",
    "\n",
    "    def fit(self, X, y):\n",
    "        '''\n",
    "        Fit the linear regression model to the training data.\n",
    "\n",
    "        Parameters:\n",
    "        X (array-like): Training input data.\n",
    "        y (array-like): Target values.\n",
    "\n",
    "        Returns:\n",
    "        None\n",
    "        '''\n",
    "        # Add bias term to input data\n",
    "        X = np.insert(X, 0, 1, axis=1)\n",
    "        y = y.reshape((-1, 1))\n",
    "        \n",
    "        if self.regularization is None:\n",
    "            \n",
    "            # Solve for weights without regularization\n",
    "            A=np.linalg.pinv(X.T @ X ) \n",
    "        \n",
    "        \n",
    "            self.weights = A @ X.T @ y\n",
    "            \n",
    "        elif self.regularization == \"lasso\":\n",
    "            \n",
    "            # Solve for weights with Lasso regularization\n",
    "            self.weights = self._lasso_regression(X, y)\n",
    "            \n",
    "        elif self.regularization == \"ridge\":\n",
    "            \n",
    "            # Solve for weights with Ridge regularization\n",
    "            self.weights = self._ridge_regression(X, y)\n",
    "            \n",
    "        else:\n",
    "            raise ValueError(\"Invalid regularization type. Please choose None, 'lasso', or 'ridge'.\")\n",
    "\n",
    "    def predict(self, X):\n",
    "        '''\n",
    "        Make predictions using the trained model.\n",
    "\n",
    "        Parameters:\n",
    "        X (array-like): Input data for prediction.\n",
    "\n",
    "        Returns:\n",
    "        array-like: Predicted target values.\n",
    "        '''\n",
    "        if self.weights is None:\n",
    "            raise ValueError(\"Model has not been fitted yet. Please call the fit method first.\")\n",
    "        \n",
    "        # FILL HERE\n",
    "        X = np.insert(X, 0, 1, axis=1)\n",
    "        return np.dot(X, self.weights)\n",
    "\n",
    "    \n",
    "    def _lasso_term(self, weights):\n",
    "        '''\n",
    "        Compute the Lasso regularization term.\n",
    "\n",
    "        Parameters:\n",
    "        weights (array-like): Model weights.\n",
    "\n",
    "        Returns:\n",
    "        float: Lasso regularization term.\n",
    "        '''\n",
    "        # FILL HERE\n",
    "        return self.alpha * np.sum(np.absolute(weights))\n",
    "        \n",
    "\n",
    "    def _lasso_derivative(self, weights):\n",
    "        '''\n",
    "        Compute the derivative of the Lasso regularization term.\n",
    "\n",
    "        Parameters:\n",
    "        weights (array-like): Model weights.\n",
    "\n",
    "        Returns:\n",
    "        array-like: Derivative of the Lasso regularization term.\n",
    "        '''\n",
    "        # FILL HERE\n",
    "        return self.alpha * np.sign(weights) \n",
    "    \n",
    "    def _lasso_regression(self, X, y):\n",
    "        '''\n",
    "        Perform Lasso regression to find model weights.\n",
    "\n",
    "        Parameters:\n",
    "        X (array-like): Input data.\n",
    "        y (array-like): Target values.\n",
    "\n",
    "        Returns:\n",
    "        array-like: Model weights.\n",
    "        '''\n",
    "        X = X - X.mean()\n",
    "        \n",
    "        n,d = X.shape\n",
    "        w = np.random.randn(d, 1)\n",
    "        num_iterations = 500\n",
    "        lr = 0.2\n",
    "        \n",
    "        for it in range(num_iterations):\n",
    "            y_pred = np.dot(X, w)\n",
    "            loss = (1 / (2*n)) * np.sum(np.square(y_pred - y)) + self._lasso_term(w)\n",
    "            dw = (1/n) * np.dot(X.T, (y_pred - y)) + self._lasso_derivative(w)\n",
    "            w = w - lr * dw\n",
    "        return w\n",
    "            \n",
    "    def _ridge_regression(self, X, y):\n",
    "        '''\n",
    "        Perform Ridge regression to find model weights.\n",
    "\n",
    "        Parameters:\n",
    "        X (array-like): Input data.\n",
    "        y (array-like): Target values.\n",
    "\n",
    "        Returns:\n",
    "        array-like: Model weights.\n",
    "        '''\n",
    "        # FILL HERE\n",
    "        A=np.linalg.inv(X.T @ X + self.alpha * np.eye(X.shape[1]) ) \n",
    "        return A @ X.T @ y\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "183f654b",
   "metadata": {
    "papermill": {
     "duration": 0.023146,
     "end_time": "2024-03-12T14:58:11.977252",
     "exception": false,
     "start_time": "2024-03-12T14:58:11.954106",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sec 3: Moddel Fitting (P4-Sec3: 5 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4a53b97",
   "metadata": {
    "papermill": {
     "duration": 0.022656,
     "end_time": "2024-03-12T14:58:12.023258",
     "exception": false,
     "start_time": "2024-03-12T14:58:12.000602",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Fit 3 linear regressor to the data.\n",
    "- Your implemented linear regression.\n",
    "- Your implemented ridge.\n",
    "- Your implemented lasso.\n",
    "\n",
    "**(P4-3-1: 3 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "cd95adf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:12.071448Z",
     "iopub.status.busy": "2024-03-12T14:58:12.071008Z",
     "iopub.status.idle": "2024-03-12T14:58:12.194796Z",
     "shell.execute_reply": "2024-03-12T14:58:12.193369Z"
    },
    "papermill": {
     "duration": 0.152241,
     "end_time": "2024-03-12T14:58:12.198223",
     "exception": false,
     "start_time": "2024-03-12T14:58:12.045982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_regzrs = [\n",
    "    (\"Linear Regression\", CustomLinearRegression()),\n",
    "    (\"Ridge\", CustomLinearRegression(regularization=\"ridge\")),\n",
    "    (\"Lasso\", CustomLinearRegression(regularization=\"lasso\"))\n",
    "]\n",
    "\n",
    "# FILL HERE\n",
    "my_Linear_Regression = CustomLinearRegression()\n",
    "my_Linear_Regression.fit(x_train, y_train)\n",
    "\n",
    "my_Ridge = CustomLinearRegression(regularization=\"ridge\")\n",
    "my_Ridge.fit(x_train, y_train)\n",
    "\n",
    "my_Lasso = CustomLinearRegression(regularization=\"lasso\")\n",
    "my_Lasso.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3addf780",
   "metadata": {
    "papermill": {
     "duration": 0.039393,
     "end_time": "2024-03-12T14:58:12.277070",
     "exception": false,
     "start_time": "2024-03-12T14:58:12.237677",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Fit 3 linear regressor to the data.\n",
    "- sklearn linear regression.\n",
    "- sklearn lasso.\n",
    "- sklearn ridge.\n",
    "\n",
    "**(P4-3-2: 2 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "19191bde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:12.340425Z",
     "iopub.status.busy": "2024-03-12T14:58:12.339972Z",
     "iopub.status.idle": "2024-03-12T14:58:12.772920Z",
     "shell.execute_reply": "2024-03-12T14:58:12.771842Z"
    },
    "papermill": {
     "duration": 0.461513,
     "end_time": "2024-03-12T14:58:12.776719",
     "exception": false,
     "start_time": "2024-03-12T14:58:12.315206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.121e+17, tolerance: 3.093e+14\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "Lasso()"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression, Lasso, Ridge\n",
    "\n",
    "sk_regzrs = [(\"Linear Regression\", LinearRegression(fit_intercept=False)), (\"Ridge\", Ridge()), (\"Lasso\", Lasso())]\n",
    "\n",
    "# FILL HERE\n",
    "\n",
    "linear_regression=LinearRegression(fit_intercept=False)\n",
    "linear_regression.fit(x_train, y_train)\n",
    "\n",
    "ridge = Ridge()\n",
    "ridge.fit(x_train, y_train)\n",
    "\n",
    "lasso = Lasso(max_iter=1000, alpha=1.0)\n",
    "lasso.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3884ccd",
   "metadata": {
    "papermill": {
     "duration": 0.038704,
     "end_time": "2024-03-12T14:58:12.855094",
     "exception": false,
     "start_time": "2024-03-12T14:58:12.816390",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Phase 5: Evaluation (P5: 15 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbb45ebe",
   "metadata": {
    "papermill": {
     "duration": 0.022486,
     "end_time": "2024-03-12T14:58:12.909392",
     "exception": false,
     "start_time": "2024-03-12T14:58:12.886906",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sec 1: RMSE (P5-Sec1: 10 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21be8013",
   "metadata": {
    "papermill": {
     "duration": 0.023715,
     "end_time": "2024-03-12T14:58:12.956215",
     "exception": false,
     "start_time": "2024-03-12T14:58:12.932500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Calculate the root mean squared error of your three models on the `train` data. **(P5-1-1: 3 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "471af6c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:13.004697Z",
     "iopub.status.busy": "2024-03-12T14:58:13.004272Z",
     "iopub.status.idle": "2024-03-12T14:58:13.022323Z",
     "shell.execute_reply": "2024-03-12T14:58:13.021233Z"
    },
    "papermill": {
     "duration": 0.046084,
     "end_time": "2024-03-12T14:58:13.025471",
     "exception": false,
     "start_time": "2024-03-12T14:58:12.979387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "***** MSE of my model on train data *****\n",
      "185660574885071.34  <==  Linear Regression \n",
      "186297708489873.34  <==  Ridge \n",
      "240675463806195.12  <==  Lasso \n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "# FILL HERE\n",
    "print('*'*5,'MSE of my model on train data','*'*5)\n",
    "print(mean_squared_error(y_train, my_Linear_Regression.predict(x_train)),' <==  Linear Regression ')\n",
    "print(mean_squared_error(y_train, my_Ridge.predict(x_train)),' <==  Ridge ')\n",
    "print(mean_squared_error(y_train, my_Lasso.predict(x_train)),' <==  Lasso ')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04f505fc",
   "metadata": {
    "papermill": {
     "duration": 0.040372,
     "end_time": "2024-03-12T14:58:13.106397",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.066025",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Calculate the root mean squared error of sklearn's three models on the `train` data. **(P5-1-2: 2 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1e5e3a5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:13.168692Z",
     "iopub.status.busy": "2024-03-12T14:58:13.168244Z",
     "iopub.status.idle": "2024-03-12T14:58:13.185322Z",
     "shell.execute_reply": "2024-03-12T14:58:13.184161Z"
    },
    "papermill": {
     "duration": 0.04556,
     "end_time": "2024-03-12T14:58:13.188635",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.143075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "***** MSE of Sklearn on train data *****\n",
      "185660574885071.34  <== Linear Regression \n",
      "186263865130330.94  <==  Ridge \n",
      "185660574924375.34  <==  Lasso \n"
     ]
    }
   ],
   "source": [
    "# FILL HERE\n",
    "print('*'*5,'MSE of Sklearn on train data','*'*5)\n",
    "print(mean_squared_error(y_train, linear_regression.predict(x_train)),' <== Linear Regression ')\n",
    "print(mean_squared_error(y_train, ridge.predict(x_train)),' <==  Ridge ')\n",
    "print(mean_squared_error(y_train, lasso.predict(x_train)),' <==  Lasso ')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2946d801",
   "metadata": {
    "papermill": {
     "duration": 0.039585,
     "end_time": "2024-03-12T14:58:13.268270",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.228685",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Calculate the root mean squared error of your three models on the `test` data. **(P5-1-3: 3 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ea73c09e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:13.332119Z",
     "iopub.status.busy": "2024-03-12T14:58:13.331679Z",
     "iopub.status.idle": "2024-03-12T14:58:13.344767Z",
     "shell.execute_reply": "2024-03-12T14:58:13.342909Z"
    },
    "papermill": {
     "duration": 0.040965,
     "end_time": "2024-03-12T14:58:13.347945",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.306980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "***** MSE of Sklearn on test data *****\n",
      "94290696617985.44  <== Linear Regression \n",
      "93820026145835.5  <== Ridge \n",
      "148554678092879.4  <== Lasso \n"
     ]
    }
   ],
   "source": [
    "# FILL HERE\n",
    "print('*'*5,'MSE of Sklearn on test data','*'*5)\n",
    "print(mean_squared_error(y_test, my_Linear_Regression.predict(x_test)),' <== Linear Regression ')\n",
    "print(mean_squared_error(y_test, my_Ridge.predict(x_test)),' <== Ridge ')\n",
    "print(mean_squared_error(y_test, my_Lasso.predict(x_test)),' <== Lasso ')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d093d137",
   "metadata": {
    "papermill": {
     "duration": 0.040105,
     "end_time": "2024-03-12T14:58:13.428915",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.388810",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Calculate the root mean squared error of sklearn's three models on the `test` data. **(P5-1-4: 2 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d7a516f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:13.493231Z",
     "iopub.status.busy": "2024-03-12T14:58:13.492094Z",
     "iopub.status.idle": "2024-03-12T14:58:13.506323Z",
     "shell.execute_reply": "2024-03-12T14:58:13.505131Z"
    },
    "papermill": {
     "duration": 0.044064,
     "end_time": "2024-03-12T14:58:13.510553",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.466489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "***** MSE of Sklearn on test data *****\n",
      "94345981782099.67  <== Linear Regression \n",
      "93726219803510.39  <== Ridge \n",
      "94553612668655.03  <== Lasso \n"
     ]
    }
   ],
   "source": [
    "# FILL HERE\n",
    "print('*'*5,'MSE of Sklearn on test data','*'*5)\n",
    "print(mean_squared_error(y_test, linear_regression.predict(x_test)),' <== Linear Regression ')\n",
    "print(mean_squared_error(y_test, ridge.predict(x_test)),' <== Ridge ')\n",
    "print(mean_squared_error(y_test, lasso.predict(x_test)),' <== Lasso ')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33c06af1",
   "metadata": {
    "papermill": {
     "duration": 0.0402,
     "end_time": "2024-03-12T14:58:13.591845",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.551645",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sec 2: Lasso (P5-Sec2: 5 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42262949",
   "metadata": {
    "papermill": {
     "duration": 0.02328,
     "end_time": "2024-03-12T14:58:13.651873",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.628593",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Get trained weights of scikit-learn's Lasso model. **(P5-2-1: 3 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9c560f3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:13.701220Z",
     "iopub.status.busy": "2024-03-12T14:58:13.700815Z",
     "iopub.status.idle": "2024-03-12T14:58:13.705712Z",
     "shell.execute_reply": "2024-03-12T14:58:13.704530Z"
    },
    "papermill": {
     "duration": 0.032399,
     "end_time": "2024-03-12T14:58:13.707944",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.675545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "weights = lasso.coef_# FILL HERE\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c631d4b8",
   "metadata": {
    "papermill": {
     "duration": 0.023869,
     "end_time": "2024-03-12T14:58:13.756009",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.732140",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Sort and print the weights. **(P5-2-2: 2 points)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0b7a49b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-12T14:58:13.805677Z",
     "iopub.status.busy": "2024-03-12T14:58:13.805227Z",
     "iopub.status.idle": "2024-03-12T14:58:13.818189Z",
     "shell.execute_reply": "2024-03-12T14:58:13.816954Z"
    },
    "papermill": {
     "duration": 0.040663,
     "end_time": "2024-03-12T14:58:13.820535",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.779872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Model_Year</th>\n",
       "      <td>1.558456e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Color_زیتونی</th>\n",
       "      <td>7.924825e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gearbox</th>\n",
       "      <td>2.709740e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Color_اطلسی</th>\n",
       "      <td>1.075783e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Engine_Condition</th>\n",
       "      <td>1.073540e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Body_Condition_رنگ شدگی، در چند ناحیه</th>\n",
       "      <td>-1.375367e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Color_مسی</th>\n",
       "      <td>-1.406356e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Body_Condition_رنگ شدگی در ۴ ناحیه</th>\n",
       "      <td>-1.451559e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mileage</th>\n",
       "      <td>-1.803435e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Body_Condition_تصادفی</th>\n",
       "      <td>-3.509520e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  0\n",
       "Model_Year                             1.558456e+08\n",
       "Color_زیتونی                           7.924825e+07\n",
       "Gearbox                                2.709740e+07\n",
       "Color_اطلسی                            1.075783e+07\n",
       "Engine_Condition                       1.073540e+07\n",
       "...                                             ...\n",
       "Body_Condition_رنگ شدگی، در چند ناحیه -1.375367e+07\n",
       "Color_مسی                             -1.406356e+07\n",
       "Body_Condition_رنگ شدگی در ۴ ناحیه    -1.451559e+07\n",
       "Mileage                               -1.803435e+07\n",
       "Body_Condition_تصادفی                 -3.509520e+07\n",
       "\n",
       "[76 rows x 1 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# FILL HERE\n",
    "rezult=pd.DataFrame(weights, index=features.columns)\n",
    "rezult.sort_values(0,ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03eb6fa1",
   "metadata": {
    "papermill": {
     "duration": 0.023255,
     "end_time": "2024-03-12T14:58:13.867996",
     "exception": false,
     "start_time": "2024-03-12T14:58:13.844741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30646,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 17.418865,
   "end_time": "2024-03-12T14:58:14.813126",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-03-12T14:57:57.394261",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
